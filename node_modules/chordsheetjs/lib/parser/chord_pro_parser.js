'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _song = require('../chord_sheet/song');

var _song2 = _interopRequireDefault(_song);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NEW_LINE = '\n';
var SQUARE_START = '[';
var SQUARE_END = ']';
var CURLY_START = '{';
var CURLY_END = '}';
var COLON = ':';
var SHARP_SIGN = '#';

var ChordProParser = function () {
  function ChordProParser() {
    _classCallCheck(this, ChordProParser);
  }

  _createClass(ChordProParser, [{
    key: 'parse',
    value: function parse(document) {
      this.song = new _song2.default();
      this.resetTag();
      this.processor = this.readLyrics;
      this.parseDocument(document);
      return this.song;
    }
  }, {
    key: 'parseDocument',
    value: function parseDocument(document) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = document[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var chr = _step.value;

          this.processor(chr);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'readLyrics',
    value: function readLyrics(chr) {
      switch (chr) {
        case SHARP_SIGN:
          this.processor = this.readComment;
          break;
        case NEW_LINE:
          this.song.addLine();
          break;
        case SQUARE_START:
          this.song.addChordLyricsPair();
          this.processor = this.readChords;
          break;
        case CURLY_START:
          this.processor = this.readTagName;
          break;
        default:
          this.song.lyrics(chr);
      }
    }
  }, {
    key: 'readChords',
    value: function readChords(chr) {
      switch (chr) {
        case NEW_LINE:
          break;
        case SQUARE_START:
          break;
        case SQUARE_END:
          this.processor = this.readLyrics;
          break;
        default:
          this.song.chords(chr);
      }
    }
  }, {
    key: 'readTagName',
    value: function readTagName(chr) {
      switch (chr) {
        case COLON:
          this.processor = this.readTagValue;
          break;
        case CURLY_END:
          this.finishTag();
          this.processor = this.readLyrics;
          break;
        default:
          this.tagName += chr;
      }
    }
  }, {
    key: 'readTagValue',
    value: function readTagValue(chr) {
      switch (chr) {
        case CURLY_END:
          this.finishTag();
          this.processor = this.readLyrics;
          break;
        default:
          this.tagValue += chr;
      }
    }
  }, {
    key: 'readComment',
    value: function readComment(chr) {
      switch (chr) {
        case NEW_LINE:
          this.processor = this.readLyrics;
          break;
      }
    }
  }, {
    key: 'finishTag',
    value: function finishTag() {
      this.song.addTag(this.tagName, this.tagValue);
      this.resetTag();
    }
  }, {
    key: 'resetTag',
    value: function resetTag() {
      this.tagName = '';
      this.tagValue = '';
    }
  }]);

  return ChordProParser;
}();

exports.default = ChordProParser;