'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var META_TAGS = ['title', 'subtitle'];

var ALIASES = {
  t: 'title',
  st: 'subtitle'
};

var translateTagNameAlias = function translateTagNameAlias(name) {
  if (name in ALIASES) {
    return ALIASES[name];
  }

  return name;
};

var Tag = function () {
  function Tag(name, value) {
    _classCallCheck(this, Tag);

    this.name = name;
    this.value = value;
  }

  _createClass(Tag, [{
    key: 'hasValue',
    value: function hasValue() {
      return !!this._value.trim().length;
    }
  }, {
    key: 'isMetaTag',
    value: function isMetaTag() {
      return META_TAGS.indexOf(this.name) !== -1;
    }
  }, {
    key: 'name',
    set: function set(name) {
      this._name = translateTagNameAlias(name);
      this._originalName = name;
    },
    get: function get() {
      return this._name.trim();
    }
  }, {
    key: 'originalName',
    get: function get() {
      return this._originalName.trim();
    }
  }, {
    key: 'value',
    set: function set(value) {
      this._value = value;
    },
    get: function get() {
      return this._value.trim();
    }
  }]);

  return Tag;
}();

exports.default = Tag;